<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="https://fabpl.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://fabpl.github.io/" rel="alternate" type="text/html" /><updated>2021-03-09T18:13:19+01:00</updated><id>https://fabpl.github.io/feed.xml</id><title type="html">Fabrice Planchette</title><subtitle>Lead Developer, Full-stack Developer, love coding.</subtitle><author><name>Fabrice Planchette</name></author><entry><title type="html">Améliorer la lisibilité de son code sous Laravel avec quelques helpers</title><link href="https://fabpl.github.io/laravel/2021/03/09/ameliorer-lisibilite-code-helpers-laravel.html" rel="alternate" type="text/html" title="Améliorer la lisibilité de son code sous Laravel avec quelques helpers" /><published>2021-03-09T06:00:00+01:00</published><updated>2021-03-09T06:00:00+01:00</updated><id>https://fabpl.github.io/laravel/2021/03/09/ameliorer-lisibilite-code-helpers-laravel</id><content type="html" xml:base="https://fabpl.github.io/laravel/2021/03/09/ameliorer-lisibilite-code-helpers-laravel.html">&lt;p&gt;Les helpers sous Laravel ne sont que des fonctions “raccourcis” mais qui permettent, à mon sens, d’améliorer grandement la lisibilité du code.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;lever-une-exception-http&quot;&gt;Lever une exception HTTP&lt;/h2&gt;

&lt;p&gt;Si tu as besoin de lever une exception (403, 404, …) dans ton controller, Laravel dispose de la fonction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abort&lt;/code&gt; qui s’utilise comme ceci :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$some_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;403&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Unauthorized action.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Mais pour aller un petit plus loin, il existe aussi &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abort_if&lt;/code&gt; qui diminue le nombre de ligne de code :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;nx&quot;&gt;abort_if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$some_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;403&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Unauthorized action.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Il existe également son “contraire”, à savoir &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abort_unless&lt;/code&gt; que j’aurais tendance à déconseiller car cela provoque une lecture en double négation par très lisible à mon gout.&lt;/p&gt;

&lt;h2 id=&quot;faire-une-redirection-http&quot;&gt;Faire une redirection HTTP&lt;/h2&gt;

&lt;p&gt;Voici la fonction la plus lisible pour générer une redirection HTTP et dans l’optique de ne pas passer par la facade &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Redirect&lt;/code&gt; :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/path/to'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Et si tu veux juste renvoyer l’utilisateur d’où il vient (par exemple sur l’update d’une ressource), tu as la fonction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;back()&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Je te laisse consulter la &lt;a href=&quot;https://laravel.com/docs/8.x/redirects&quot;&gt;documentation Laravel sur les redirections&lt;/a&gt; pour voir toutes les possibilités derrière ses fonctions.&lt;/p&gt;

&lt;h2 id=&quot;récupérer-la-date-courante&quot;&gt;Récupérer la date courante&lt;/h2&gt;

&lt;p&gt;Laravel utilise le package &lt;a href=&quot;https://carbon.nesbot.com&quot;&gt;Carbon&lt;/a&gt; pour facilement manipuler les dates et donc les objets &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Datetime&lt;/code&gt;. 
Mais là encore, plutôt que de passer par la facade &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date&lt;/code&gt; ou encore la classe &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Carbon&lt;/code&gt; (que cela soit celle du package ou celle dans le namespace Support d’ailleurs), Laravel fournit 2 helpers renvoyant des instances :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;now()&lt;/code&gt; pour une instance initialisée à la seconde près,&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;today()&lt;/code&gt; pour une instance sur la date du jour.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Fabrice Planchette</name></author><category term="laravel" /><category term="php laravel helper" /><summary type="html">Les helpers sous Laravel ne sont que des fonctions “raccourcis” mais qui permettent, à mon sens, d’améliorer grandement la lisibilité du code.</summary></entry><entry><title type="html">Nommer ses commits dans git</title><link href="https://fabpl.github.io/git/2021/02/11/nommer-commits.html" rel="alternate" type="text/html" title="Nommer ses commits dans git" /><published>2021-02-11T06:00:00+01:00</published><updated>2021-02-11T06:00:00+01:00</updated><id>https://fabpl.github.io/git/2021/02/11/nommer-commits</id><content type="html" xml:base="https://fabpl.github.io/git/2021/02/11/nommer-commits.html">&lt;p&gt;Tu connais ce moment : tu viens de coder quelques lignes de code et tu dois maintenant le “push” sur ta plateforme GIT préféré et là LA question : quel nom je donne à ce commit ?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/git_commit.png&quot; alt=&quot;&quot; /&gt;
&lt;a href=&quot;https://xkcd.com/1296/&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Attention je parle ici de convention car oui, tu fais ce que tu veux mais l’idée quand tu donnes un petit nom à ton commit est de permettre à n’importe que de comprendre ce que tu as fais en quelques mots.&lt;/p&gt;

&lt;p&gt;Personnellement, j’essaie d’appliquer la &lt;a href=&quot;https://www.conventionalcommits.org/en/v1.0.0/&quot;&gt;Conventional Commits&lt;/a&gt;. Pas la peine d’aller regarder &lt;a href=&quot;https://github.com/fabpl&quot;&gt;mes repos sur github&lt;/a&gt; pour vérifier si c’est le cas, je plaide coupable d’avance. Pour mes projets personnels ce n’est pas toujours le cas mais dans le cadre professionnel, ca me parait nécessaire dans la mesure où il s’agit d’un travail d’équipe.&lt;/p&gt;

&lt;h2 id=&quot;alors-ca-ressemble-à-quoi-cette-convention-&quot;&gt;Alors ca ressemble à quoi cette convention ?&lt;/h2&gt;

&lt;p&gt;Voici à quoi elle ressemble :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;lt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;[&lt;/span&gt;optional scope]: &amp;lt;description&amp;gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;optional body]

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;optional footer&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;2 éléments obligatoires (type et description) et 3 optionnels (scope, body et footer).&lt;/p&gt;

&lt;h3 id=&quot;type&quot;&gt;Type&lt;/h3&gt;

&lt;p&gt;Le type du commit, c’est ce qui caractérise le commit. Normalement avec les 9 types suivants vous devriez couvrir l’ensemble des possibilités.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;build : changements qui affectent le système de build ou des dépendances externes (npm, composer…)&lt;/li&gt;
  &lt;li&gt;ci : changements concernant les fichiers et scripts d’intégration ou de configuration (Travis, CircleCI…)&lt;/li&gt;
  &lt;li&gt;docs : rédaction ou mise à jour de documentation&lt;/li&gt;
  &lt;li&gt;feat : ajout d’une nouvelle fonctionnalité&lt;/li&gt;
  &lt;li&gt;fix : correction d’un bug&lt;/li&gt;
  &lt;li&gt;perf : amélioration des performances&lt;/li&gt;
  &lt;li&gt;refactor : modification qui n’apporte ni nouvelle fonctionalité ni d’amélioration de performances&lt;/li&gt;
  &lt;li&gt;style : changement qui n’apporte aucune alteration fonctionnelle ou sémantique (indentation, mise en forme…)&lt;/li&gt;
  &lt;li&gt;test : ajout ou modification de tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scope&quot;&gt;Scope&lt;/h3&gt;

&lt;p&gt;Optionnel, l’idée du scope est de préciser le type définit précédemment. On retrouvera par exemple une précision sur le domaine impacté (authentification, produit ou panier dans un ecommerce, article ou commentaire dans un blog, …)&lt;/p&gt;

&lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;

&lt;p&gt;Le sujet du commit en 50 caractères. Oui, il faut aller à l’essentiel.&lt;/p&gt;

&lt;h3 id=&quot;body&quot;&gt;Body&lt;/h3&gt;

&lt;p&gt;Optionnel, le body est là pour préciser ce qui n’est pas explicite dans la description.&lt;/p&gt;

&lt;h3 id=&quot;footer&quot;&gt;Footer&lt;/h3&gt;

&lt;p&gt;Optionnel, le footer peut servir a indiqué des références (une issue sur Github/Gitlab, un ticket sur Jira, …)&lt;/p&gt;

&lt;h2 id=&quot;un-exemple-&quot;&gt;Un exemple ?&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docs&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;changelog&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Add 1.0.1 release note&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Il faut un peu de temps pour que cette convention devienne un réflexe mais quand tu regarderas ton historique GIT, tu verras, ça fait plaisir :)&lt;/p&gt;

&lt;p&gt;Dernière chose, si tu as envie d’apporter une petite touche de bonne humeur, regarde du côté de &lt;a href=&quot;https://gitmoji.dev/&quot;&gt;gitmodji&lt;/a&gt;&lt;/p&gt;</content><author><name>Fabrice Planchette</name></author><category term="git" /><category term="git" /><summary type="html">Tu connais ce moment : tu viens de coder quelques lignes de code et tu dois maintenant le “push” sur ta plateforme GIT préféré et là LA question : quel nom je donne à ce commit ?</summary></entry><entry><title type="html">Création d’un URL Shortener - Backend</title><link href="https://fabpl.github.io/laravel/2020/09/25/url-shortener-backend.html" rel="alternate" type="text/html" title="Création d’un URL Shortener - Backend" /><published>2020-09-25T07:00:00+02:00</published><updated>2020-09-25T07:00:00+02:00</updated><id>https://fabpl.github.io/laravel/2020/09/25/url-shortener-backend</id><content type="html" xml:base="https://fabpl.github.io/laravel/2020/09/25/url-shortener-backend.html">&lt;p&gt;Tout est prêt pour maintenant concevoir le backend : une zone ou l’utilisateur authentifié pourra gérer ses liens de redirection.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;On va donc remplacer le composant “welcome” de la page créer par défaut lorsque l’on a &lt;a href=&quot;/laravel/2020/09/20/url-shortener-authentification.html&quot;&gt;installé jetstream&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pour cela, on commence par générer ce composant &lt;em&gt;Livewire&lt;/em&gt; :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;go&quot;&gt;php artisan make:livewire Links&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On obtient donc 2 nouveaux fichiers :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;La classe composant &lt;em&gt;Links&lt;/em&gt; située dans &lt;em&gt;app/Http/Livewire&lt;/em&gt;,&lt;/li&gt;
  &lt;li&gt;La vue blade dans &lt;em&gt;resources/views/livewire/links.blade.php&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Direction le fichier &lt;em&gt;dashboard.blade.php&lt;/em&gt; pour remplacer l’élément &lt;em&gt;x-jet-welcome&lt;/em&gt; par la syntaxe suivante :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-blade&quot; data-lang=&quot;blade&quot;&gt;@livewire('links')&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Commençons donc par envoyer nos liens et pour cela il faut modifier la méthode &lt;em&gt;render()&lt;/em&gt; du composant.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;WithPagination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'livewire.links'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'links'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;whereUserId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;paginate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Livewire&lt;/em&gt; est capable de gérer la pagination mais pour cela le trait &lt;em&gt;WithPagination&lt;/em&gt; doit être ajouter à notre composant.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-blade&quot; data-lang=&quot;blade&quot;&gt;&amp;lt;table class=&quot;min-w-full divide-y divide-gray-200&quot;&amp;gt;
    &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;th class=&quot;px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase&quot;&amp;gt;
            {{ __('Uid') }}
        &amp;lt;/th&amp;gt;
        &amp;lt;th class=&quot;px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase&quot;&amp;gt;
            {{ __('Url') }}
        &amp;lt;/th&amp;gt;
        &amp;lt;th class=&quot;px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase&quot;&amp;gt;
            {{ __('Actions') }}
        &amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;/thead&amp;gt;
    &amp;lt;tbody class=&quot;bg-white divide-y divide-gray-200&quot;&amp;gt;
    @foreach ($links as $link)
        &amp;lt;tr&amp;gt;
            &amp;lt;td class=&quot;px-6 py-4 whitespace-no-wrap&quot;&amp;gt;
                {{ $link-&amp;gt;uid }}
            &amp;lt;/td&amp;gt;
            &amp;lt;td class=&quot;px-6 py-4 whitespace-no-wrap&quot;&amp;gt;
                {{ $link-&amp;gt;url }}
            &amp;lt;/td&amp;gt;
            &amp;lt;td class=&quot;px-6 py-4 whitespace-no-wrap&quot;&amp;gt;
                &amp;lt;a href=&quot;#&quot; wire:click=&quot;delete({{ $link-&amp;gt;id }})&quot;&amp;gt;
                    {{ __('Delete') }}
                &amp;lt;/a&amp;gt;
            &amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
    @endforeach
    &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;

&amp;lt;div class=&quot;px-4 py-3 border-t border-gray-200 sm:px-6&quot;&amp;gt;
    {{ $links-&amp;gt;links() }}
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pour rajouter une action dans notre tableau (celle de supprimer une ligne), il suffit d’utiliser la syntaxe &lt;em&gt;wire:click&lt;/em&gt; au lien et d’implémenter la méthode dans notre composant. Ce qui donne :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-blade&quot; data-lang=&quot;blade&quot;&gt;public function delete(int $id)
{
    Link::whereId($id)-&amp;gt;whereUserId(Auth::user()-&amp;gt;id)-&amp;gt;delete();
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Bon là je fais au plus vite pour le tuto, il y aurait plein de choses à ajuster (utilisation de scope, du softDeletes, etc…).&lt;/p&gt;

&lt;p&gt;Et maintenant… Non en fait c’est tout. On vient en quelques lignes de générer un tableau paginé avec un chargement de données et des actions en “ajax”. Sympa non ?&lt;/p&gt;

&lt;h1 id=&quot;liens&quot;&gt;Liens&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fabpl/url-shortener/tree/5.backend&quot;&gt;Code source du projet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://laravel-livewire.com/docs/2.x/quickstart&quot;&gt;Documentation de Livewire&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/laravel/2020/09/19/url-shortener.html&quot;&gt;Sommaire du projet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Fabrice Planchette</name></author><category term="laravel" /><category term="php laravel" /><summary type="html">Tout est prêt pour maintenant concevoir le backend : une zone ou l’utilisateur authentifié pourra gérer ses liens de redirection.</summary></entry><entry><title type="html">Création d’un URL Shortener - Gestion des liens</title><link href="https://fabpl.github.io/laravel/2020/09/24/url-shortener-link.html" rel="alternate" type="text/html" title="Création d’un URL Shortener - Gestion des liens" /><published>2020-09-24T07:00:00+02:00</published><updated>2020-09-24T07:00:00+02:00</updated><id>https://fabpl.github.io/laravel/2020/09/24/url-shortener-link</id><content type="html" xml:base="https://fabpl.github.io/laravel/2020/09/24/url-shortener-link.html">&lt;p&gt;On s’attaque maintenant au coeur de notre application : la gestion des liens de redirection.&lt;/p&gt;

&lt;p&gt;Pour cela il nous faut :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;un model lien (et son fichier de migration)&lt;/li&gt;
  &lt;li&gt;une route /link/{uid} qui redirigera vers la véritable url.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;le-model-link&quot;&gt;Le model Link&lt;/h1&gt;

&lt;p&gt;On commence par créer notre model et son fichier de migration via la commande artisan suivante :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;go&quot;&gt;php artisan make:model Link --migration&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On modifie notre fichier de migration pour y ajouter quelques colonnes nécessaires :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'links'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Blueprint&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unsignedBigInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'user_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'uid'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unique&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'url'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;timestamps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;foreign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'user_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;references&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Petite particularité, on veut savoir quel utilisateur a généré chaque lien, d’ou la &lt;em&gt;foreign key&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;On passe au model pour y ajouter ces nouveaux éléments dans les &lt;em&gt;fillable&lt;/em&gt;, ainsi que la définition de notre relation vers le model user :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cd&quot;&gt;/**
 * The attributes that are mass assignable.
 *
 * @var array
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fillable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'user_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'uid'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'url'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;cd&quot;&gt;/**
 * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;belongsTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ce qui va nous permettre de modifier dans notre &lt;em&gt;DatabaseSeeder&lt;/em&gt; pour nos tests :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Fabrice'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fabrice@laravel.local'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'email_verified_at'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'password'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// password&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'remember_token'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;Link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'user_id'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'uid'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fabpl'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'url'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://fabpl.github.io/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On lance une commande artisan pour migrer/seeder tout ça (oui je fresh mais c’est pour le tuto hein)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;go&quot;&gt;php artisan migrate:fresh --seed&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;la-route&quot;&gt;La route&lt;/h1&gt;

&lt;p&gt;Il nous reste donc la route à écrire. Là encore, pour le tuto, j’utilise une fonction anonyme et non un controller (reprend pas “bêtement” ce code quoi).
Dans le fichier &lt;em&gt;routes/web.php&lt;/em&gt; :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/{uid}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$uid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\App\Models\Link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;whereUid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$uid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;firstOrFail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;redirectTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Et voilà ! Tu peux tester &lt;em&gt;/fabpl&lt;/em&gt; pour arriver sur mon site perso 😉.&lt;/p&gt;

&lt;p&gt;La suite ? Le back office pour lister/créer/modifier/supprimer ces liens.&lt;/p&gt;

&lt;h1 id=&quot;liens&quot;&gt;Liens&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fabpl/url-shortener/tree/4.Link&quot;&gt;Code source du projet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/laravel/2020/09/19/url-shortener.html&quot;&gt;Sommaire du projet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Fabrice Planchette</name></author><category term="laravel" /><category term="php laravel" /><summary type="html">On s’attaque maintenant au coeur de notre application : la gestion des liens de redirection. Pour cela il nous faut : un model lien (et son fichier de migration) une route /link/{uid} qui redirigera vers la véritable url.</summary></entry><entry><title type="html">Création d’un URL Shortener - Tailwind - Welcome</title><link href="https://fabpl.github.io/laravel/2020/09/23/url-shortener-tailwind-welcome.html" rel="alternate" type="text/html" title="Création d’un URL Shortener - Tailwind - Welcome" /><published>2020-09-23T07:00:00+02:00</published><updated>2020-09-23T07:00:00+02:00</updated><id>https://fabpl.github.io/laravel/2020/09/23/url-shortener-tailwind-welcome</id><content type="html" xml:base="https://fabpl.github.io/laravel/2020/09/23/url-shortener-tailwind-welcome.html">&lt;p&gt;Lors de &lt;a href=&quot;/laravel/2020/09/20/url-shortener-authentification.html&quot;&gt;la partie authentification&lt;/a&gt;, TailwindCss a fait son apparition dans divers fichiers. Allez, on creuse le sujet et on refond la homepage.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;présentation&quot;&gt;Présentation&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;A utility-first CSS framework for rapidly building custom designs.&lt;/p&gt;

&lt;cite&gt;
Tailwind CSS is a highly customizable, low-level CSS framework that gives you 
all of the building blocks you need to build bespoke designs without 
any annoying opinionated styles you have to fight to override.
  &lt;/cite&gt;
&lt;/blockquote&gt;

&lt;p&gt;En résumé, on replace dans l’attribut class des éléments du DOM ce qu’il faut pour customiser cette élément.
On a là une approche totalement différente d’un bootstrap, préférant fournir des composants clés en main.&lt;/p&gt;

&lt;p&gt;Un exemple ?&lt;/p&gt;

&lt;p&gt;Avec bootstrap:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn btn-primary&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Primary&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Avec Tailwind:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Primary&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;impacts-sur-le-projet&quot;&gt;Impacts sur le projet&lt;/h1&gt;

&lt;p&gt;On va se concentrer sur 3 fichiers ont été crées ou modifiés avec &lt;a href=&quot;(/laravel/2020/09/20/url-shortener-authentification.html)&quot;&gt;notre installation de jetstream&lt;/a&gt; :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;resources/css/style.css&lt;/li&gt;
  &lt;li&gt;webpack.mix.js&lt;/li&gt;
  &lt;li&gt;tailwind.config.js&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;compilation&quot;&gt;Compilation&lt;/h2&gt;

&lt;p&gt;Sur le fichier permettant de compiler les fichiers de styles/scripts, tu remarqueras l’ajout via postCss de Tailwind. On en reparle avec le fichier de configuration de Tailwind.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;mix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;resources/js/app.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;public/js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postCss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;resources/css/app.css&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;public/css&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;postcss-import&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;tailwindcss&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;feuille-de-styles&quot;&gt;Feuille de styles&lt;/h2&gt;

&lt;p&gt;Dans la feuille de style, les éléments de tailwind sont importés.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'tailwindcss/base'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'tailwindcss/components'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'tailwindcss/utilities'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;configuration-tailwind&quot;&gt;Configuration tailwind&lt;/h2&gt;

&lt;p&gt;Plus intéressante, le fichier de config de tailwind.
Ici, tu remarqueras un élément “purge”. Oui car tailwind importe un max de classe. Amuse-toi à retirer cet étape et tu verras le poids de ton fichier css :)
L’intérêt ici est donc de parser les fichiers où tu mets des classes tailwind, en l’occurrence tes fichiers de vue, et de ne garder dans le fichier css généré que les classes utilisées.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultTheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;tailwindcss/defaultTheme&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;purge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./storage/framework/views/*.php&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./resources/views/**/*.blade.php&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;fontFamily&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;sans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Nunito&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defaultTheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fontFamily&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;variants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;responsive&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;hover&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@tailwindcss/ui&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ce sont donc tout un ensemble de classe qu’il faut ici appréhender. J’avoue que les composants &lt;em&gt;bootstrap&lt;/em&gt; s’avèrent être de puissants outils qui, à titre personnel, m’apportent aujourd’hui un certain confort dont je n’ai pas envie de me passer.
Sinon pour voir ce que ça donne (parce que t’as pas lu tout ça pour rien 😉), direction directement le fichier &lt;a href=&quot;https://github.com/fabpl/url-shortener/blob/3.Tailwind-Welcome/resources/views/welcome.blade.php&quot;&gt;welcome.blade.php sur github&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;liens&quot;&gt;Liens&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fabpl/url-shortener/tree/3.Tailwind-Welcome&quot;&gt;Code source du projet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tailwindcss.com/docs/installation&quot;&gt;Documentation de Tailwind&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/laravel/2020/09/19/url-shortener.html&quot;&gt;Sommaire du projet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Fabrice Planchette</name></author><category term="laravel" /><category term="php laravel tailwindcss" /><summary type="html">Lors de la partie authentification, TailwindCss a fait son apparition dans divers fichiers. Allez, on creuse le sujet et on refond la homepage.</summary></entry><entry><title type="html">Création d’un URL Shortener - Authentification</title><link href="https://fabpl.github.io/laravel/2020/09/20/url-shortener-authentification.html" rel="alternate" type="text/html" title="Création d’un URL Shortener - Authentification" /><published>2020-09-20T13:00:00+02:00</published><updated>2020-09-20T13:00:00+02:00</updated><id>https://fabpl.github.io/laravel/2020/09/20/url-shortener-authentification</id><content type="html" xml:base="https://fabpl.github.io/laravel/2020/09/20/url-shortener-authentification.html">&lt;p&gt;On fait du classique, les utilisateurs doivent s’enregistrer/s’authentifier pour avoir accès à notre raccourcisseur d’url.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Une fois &lt;a href=&quot;/laravel/2020/09/20/url-shortener-installation-laravel.html&quot;&gt;l’installation de Laravel&lt;/a&gt; réalisée, il nous faut gérer l’authentification (inscription, connexion, …).&lt;/p&gt;

&lt;h1 id=&quot;lauthentification&quot;&gt;L’authentification&lt;/h1&gt;

&lt;p&gt;Laravel a quelque peu évolué dans sa gestion de l’authentification.&lt;/p&gt;

&lt;p&gt;Au départ inclus dans l’application, Laravel a déporté toute la logique dans un package nommé &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;laravel/ui&lt;/code&gt;. Via des commandes artisan, il était possible de générer non seulement les controlleurs, les routes, etc… mais aussi de sortir le front en couplant &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bootstrap&lt;/code&gt; à un framework js de son choix (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vuejs&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;react&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Mais ça c’était avant Laravel 8.&lt;/p&gt;

&lt;h2 id=&quot;jeatstream&quot;&gt;Jeatstream&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;laravel-ui&lt;/code&gt; passe en déprécier au profit d’un nouveau package : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;laravel/jeatstream&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Au menu quelques nouvelles fonctionnalités (la double authentification par exemple), mais surtout 2 stack possibles pour générer le front :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Blade + Livewire&lt;/li&gt;
  &lt;li&gt;Inertia + VueJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On va ici partir sur le 1er choix (je connais VueJS et c’est donc l’occasion de découvrir LiveWire).&lt;/p&gt;

&lt;p&gt;Il nous faut donc une nouvelle dépendance :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;go&quot;&gt;composer require laravel/jetstream&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ensuite, on initialise notre stack avec Livewire :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;go&quot;&gt;php artisan jetstream:install livewire&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Si on s’intéresse à cette commande, on s’aperçoit que cela installe deux nouvelles dépendances :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Livewire&lt;/li&gt;
  &lt;li&gt;Sanctum&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ce dernier contient tout le code métier de l’authentification.&lt;/p&gt;

&lt;p&gt;La commande a également modifié le fichier des dépendances javascript (package.json), celui de la compilation (webpack.mix.js) et ajouter un fichier tailwind.config.js.
Vous l’avez compris, il nous faut maintenant les installer et lancer la compilation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;go&quot;&gt;npm install &amp;amp;&amp;amp; npm run dev&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Dernière étape, il nous faut “migrer”, c’est à dire construire notre base de données. Pour gagner du temps, on va utiliser une base &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqlite&lt;/code&gt; ce qui implique deux choses :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;la création d’un fichier database.sqlite :&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;go&quot;&gt;touch database/database.sqlite&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;et la modification du fichier &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.env&lt;/code&gt; :&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;flex flex-wrap&quot;&gt;
    &lt;div class=&quot;flex flex-col&quot;&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laravel
DB_USERNAME=root
DB_PASSWORD=&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

    &lt;/div&gt;
    &lt;div class=&quot;px-8 pt-4 flex flex-col&quot;&gt;
        devient
    &lt;/div&gt;
    &lt;div class=&quot;flex flex-col&quot;&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;DB_CONNECTION=sqlite&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Et on lance la migration :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;go&quot;&gt;php artisan migrate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A ce moment là, tu peux rafraîchir ta home dans ton navigateur et un menu Login / register a été rajouté. La page login ressemble à ça :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/jetstream-login.png&quot; alt=&quot;Page login avec JetStream&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok, on va créer notre premier user pour voir la suite. On va modifier le fichier &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;database/seeders/DatabaseSeeder.php&lt;/code&gt; :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Database\Seeders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;App\Models\User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Illuminate\Database\Seeder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Illuminate\Support\Str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DatabaseSeeder&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Seeder&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cd&quot;&gt;/**
     * Seed the application's database.
     *
     * @return void
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Fabrice'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fabrice@laravel.local'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'email_verified_at'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'password'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// password&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'remember_token'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// User::factory(10)-&amp;gt;create();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On execute :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;go&quot;&gt;php artisan db:seed&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Et on retourne se connecter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/jetstream-dashboard.png&quot; alt=&quot;Page dashboard avec JetStream&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;liens&quot;&gt;Liens&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fabpl/url-shortener/tree/2.Authentification&quot;&gt;Code source du projet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jetstream.laravel.com/1.x/introduction.html&quot;&gt;Documentation Laravel Jetstream&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/laravel/2020/09/19/url-shortener.html&quot;&gt;Sommaire du projet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Fabrice Planchette</name></author><category term="laravel" /><category term="php laravel auth" /><summary type="html">On fait du classique, les utilisateurs doivent s’enregistrer/s’authentifier pour avoir accès à notre raccourcisseur d’url.</summary></entry><entry><title type="html">Création d’un URL Shortener - Installation de Laravel 8</title><link href="https://fabpl.github.io/laravel/2020/09/20/url-shortener-installation-laravel.html" rel="alternate" type="text/html" title="Création d’un URL Shortener - Installation de Laravel 8" /><published>2020-09-20T07:00:00+02:00</published><updated>2020-09-20T07:00:00+02:00</updated><id>https://fabpl.github.io/laravel/2020/09/20/url-shortener-installation-laravel</id><content type="html" xml:base="https://fabpl.github.io/laravel/2020/09/20/url-shortener-installation-laravel.html">&lt;p&gt;Au commencement il n’y avait rien, puis Laravel 8 est arrivé.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;installation-de-laravel-8&quot;&gt;Installation de Laravel 8&lt;/h1&gt;

&lt;p&gt;Laravel peut s’installer de deux manières différentes : Laravel Installer ou Composer create-project. 
Perso, je préfère la deuxième méthode :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;go&quot;&gt;composer create-project --prefer-dist laravel/laravel url-shortener&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/composer-create-project-laravel.png&quot; alt=&quot;Installation Laravel 8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Une fois les différents packages installés, il suffit de lancer cette commande artisan pour lancer un serveur de développement :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;go&quot;&gt;php artisan serve&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Et comme le retour te l’indique, il te suffit d’ouvrir ton navigateur préféré à l’adresse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://127.0.0.1:8000&lt;/code&gt; pour découvrir la homepage.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/laravel-homepage.png&quot; alt=&quot;Laravel 8 homepage&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;liens&quot;&gt;Liens&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fabpl/url-shortener/tree/1.Installation-Laravel&quot;&gt;Code source&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://laravel.com/docs/8.x/installation&quot;&gt;Documentation Laravel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/laravel/2020/09/19/url-shortener.html&quot;&gt;Sommaire du projet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Fabrice Planchette</name></author><category term="laravel" /><category term="php laravel" /><summary type="html">Au commencement il n’y avait rien, puis Laravel 8 est arrivé.</summary></entry><entry><title type="html">Création d’un URL Shortener avec la stack Laravel 8 / Livewire / TailwindCss</title><link href="https://fabpl.github.io/laravel/2020/09/19/url-shortener.html" rel="alternate" type="text/html" title="Création d’un URL Shortener avec la stack Laravel 8 / Livewire / TailwindCss" /><published>2020-09-19T07:00:00+02:00</published><updated>2020-09-19T07:00:00+02:00</updated><id>https://fabpl.github.io/laravel/2020/09/19/url-shortener</id><content type="html" xml:base="https://fabpl.github.io/laravel/2020/09/19/url-shortener.html">&lt;p&gt;Il y a quelques semaines, j’ai lu un article sur la stack TALL. Oui encore un acronyme pour désigner les éléments suivants :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;T&lt;/strong&gt;ailwindCss&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;lpine.js&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;L&lt;/strong&gt;aravel&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;L&lt;/strong&gt;ivewire&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bref, le combo pour créer une application web dynamique du front au back, en passant par de l’UX bien pensé.
Il me fallait donc une idée de projet pour découvrir tout ça : Un raccourcisseur d’URL (ou URL Shortener).&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;sommaire&quot;&gt;Sommaire&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/laravel/2020/09/20/url-shortener-installation-laravel.html&quot;&gt;Installation de Laravel 8&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/laravel/2020/09/20/url-shortener-authentification.html&quot;&gt;Authentification&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/laravel/2020/09/20/url-shortener-tailwind-welcome.html&quot;&gt;Tailwind - Welcome&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;liens&quot;&gt;Liens&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fabpl/url-shortener&quot;&gt;Code source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Fabrice Planchette</name></author><category term="laravel" /><category term="php laravel livewire tailwindcss url-shortener" /><summary type="html">Il y a quelques semaines, j’ai lu un article sur la stack TALL. Oui encore un acronyme pour désigner les éléments suivants : TailwindCss Alpine.js Laravel Livewire Bref, le combo pour créer une application web dynamique du front au back, en passant par de l’UX bien pensé. Il me fallait donc une idée de projet pour découvrir tout ça : Un raccourcisseur d’URL (ou URL Shortener).</summary></entry><entry><title type="html">Désactiver le cache Laravel</title><link href="https://fabpl.github.io/laravel/2020/07/13/desactiver-cache.html" rel="alternate" type="text/html" title="Désactiver le cache Laravel" /><published>2020-07-13T07:00:00+02:00</published><updated>2020-07-13T07:00:00+02:00</updated><id>https://fabpl.github.io/laravel/2020/07/13/desactiver-cache</id><content type="html" xml:base="https://fabpl.github.io/laravel/2020/07/13/desactiver-cache.html">&lt;p&gt;Dans les meilleurs excuses de développeur, je demande le numéro 1 et de loin : Vide ton cache ! 
Car oui, tu le sais aussi bien que moi, un cache c’est bien pratique pour gagner en performance, mais ça peut jouer des tours.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Je ne vais pas ici te parler du cache navigateur mais bien celui mis en place côté back.
Car oui, Laravel va générer des fichiers en cache et pour plusieurs éléments :configuration, routing, vues.&lt;/p&gt;

&lt;h1 id=&quot;vide-ton-cache&quot;&gt;Vide ton cache&lt;/h1&gt;

&lt;p&gt;Pour effacer les fichiers mis en cache, tu as à ta disposition quelques commandes artisan.&lt;/p&gt;

&lt;p&gt;Les premières commandes sont ciblées aux 3 éléments qui ont été cités précédemment :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;go&quot;&gt;php artisan config:clear
php artisan route:clear
php artisan view:clear&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;ou de manière plus global :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;go&quot;&gt;php artisan cache:clear&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;désactiver-le-cache&quot;&gt;Désactiver le cache&lt;/h1&gt;

&lt;p&gt;Lors de la phase de développement, t’as pas forcement envie de lancer cette dernière commande après chaque modification de ton code.
D’où l’idée de chercher à le désactiver complément.&lt;/p&gt;

&lt;p&gt;Comment ? En regardant &lt;a href=&quot;https://laravel.com/docs/7.x/cache&quot;&gt;la doc sur le cache&lt;/a&gt;, tu trouveras… à bah non tu trouveras rien.
Et pourtant, si tu fouilles dans le code source (bah ouai j’aime bien savoir comment ca marche), tu trouveras bien qu’il est possible de créer &lt;a href=&quot;https://github.com/laravel/framework/blob/b78880ad600cceb90cadbac1bef4aa60a3141106/src/Illuminate/Cache/CacheManager.php#L185&quot;&gt;un “NullDriver”&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Du coup pour l’utiliser, il va falloir modifier 2 fichiers :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;le fichier &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/cache.php&lt;/code&gt; pour rajouter ce nouveau “driver” qui n’est pas définit par défaut,&lt;/li&gt;
  &lt;li&gt;et le fichier &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.env&lt;/code&gt; pour l’utiliser&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pour le fichier de configuration :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;s1&quot;&gt;'stores'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'disabled'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'driver'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'null'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;et le fichier d’environnement :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;go&quot;&gt;CACHE_DRIVER=disabled&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Et voila ! Plus de cache en local :)&lt;/p&gt;</content><author><name>Fabrice Planchette</name></author><category term="laravel" /><category term="php laravel cache" /><summary type="html">Dans les meilleurs excuses de développeur, je demande le numéro 1 et de loin : Vide ton cache ! Car oui, tu le sais aussi bien que moi, un cache c’est bien pratique pour gagner en performance, mais ça peut jouer des tours.</summary></entry><entry><title type="html">Les expressions régulières</title><link href="https://fabpl.github.io/code/2020/07/03/regexp.html" rel="alternate" type="text/html" title="Les expressions régulières" /><published>2020-07-03T07:00:00+02:00</published><updated>2020-07-03T07:00:00+02:00</updated><id>https://fabpl.github.io/code/2020/07/03/regexp</id><content type="html" xml:base="https://fabpl.github.io/code/2020/07/03/regexp.html">&lt;p&gt;Les expressions régulières sont un outil transverse aux langages de programmation. Et que tu sois un développeur php ou javascript ou autre, quand un collègue te demande un coup de main pour écrire sa regexp (parce que regular expression c’est trop long), tu hésites et c’est normal.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;pourquoi-les-regexp-&quot;&gt;Pourquoi les regexp ?&lt;/h3&gt;

&lt;p&gt;C’est une sorte de fonction de recherche dans une chaîne de caractères. Mais pas que. En plus, elles permettent aussi faire de la validation ou de l’extraction de données.&lt;/p&gt;

&lt;p&gt;Donc si tu veux :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;valider le format d’une chaîne (ex : une adresse web),&lt;/li&gt;
  &lt;li&gt;extraire une portion de chaîne (ex : le type de rue dans une adresse)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Les regexp sont là pour toi.&lt;/p&gt;

&lt;h3 id=&quot;délimiteurs&quot;&gt;Délimiteurs&lt;/h3&gt;

&lt;p&gt;Une regexp est toujours entourée de délimiteur. Tu peux mettre ce que tu veux mais hésite pas trop longtemps. Perso entre le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; et le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; mon coeur balance.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-regexp&quot; data-lang=&quot;regexp&quot;&gt;/regexp/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Prenons la chaîne suivante : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello world!&lt;/code&gt;.
Pour tester que &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;world&lt;/code&gt; est présent, ça donne simplement :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-regexp&quot; data-lang=&quot;regexp&quot;&gt;/world/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;début-et-fin-de-chaîne&quot;&gt;Début et fin de chaîne&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ok mais moi je veux tester que ca commence par “world”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tu es bien exigeant jeune padawan, mais pour répondre à ta question, c’est pour ça qu’il existe des marqueurs de début et fin de chaîne : respectivement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;^&lt;/code&gt; et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-regexp&quot; data-lang=&quot;regexp&quot;&gt;/^world/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;les-caractères&quot;&gt;Les caractères&lt;/h3&gt;

&lt;p&gt;Bon un mot exact dans une chaîne c’est bien mignon mais dans la vrai vie (de dev) ta recherche est plus abstraite que ça. 
Donc voici comment tu peux utiliser les caractères dans ta regexp :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[a-z] : Caractères minuscules de a à z.&lt;/li&gt;
  &lt;li&gt;[0-9] : Chiffres de 0 à 9.&lt;/li&gt;
  &lt;li&gt;[a-z0-9] : Lettres de « a » à « z » ou chiffres de 0 à 9.&lt;/li&gt;
  &lt;li&gt;#[^0-9]# : Chaîne ne contenant PAS de chiffres.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;T’as vu le dernier de la liste ? 
Pour faire une négation c’est avec un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;^&lt;/code&gt;, le même caractère que pour un début de chaîne. 
Ouai faut le savoir…&lt;/p&gt;

&lt;h3 id=&quot;les-quantifieurs&quot;&gt;Les quantifieurs&lt;/h3&gt;

&lt;p&gt;Bah oui, ça va avec les caractères que l’on a vu au-dessus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;#a?# : « a » peut apparaître 0 ou 1 fois.&lt;/li&gt;
  &lt;li&gt;#a+# : « a » doit apparaître au moins 1 fois.&lt;/li&gt;
  &lt;li&gt;#a*# : « a » peut apparaître 0, 1 ou plusieurs fois.&lt;/li&gt;
  &lt;li&gt;#a{3}# : « a » doit apparaître 3 fois exactement (« aaa »).&lt;/li&gt;
  &lt;li&gt;#a{3,5}# : « a » doit apparaître de 3 à 5 fois (« aaa », « aaaa », « aaaaa »).&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Donc si on applique la regexp suivante sur notre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello world!&lt;/code&gt; ca marche ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-regexp&quot; data-lang=&quot;regexp&quot;&gt;/[a-z]+/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Et non ! La majuscule, l’espace et le point d’exclamation, tu ne gères pas ces éléments dans ta regexp.&lt;/p&gt;

&lt;p&gt;Ca sert à rien mais si tu veux valider ton &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello world!&lt;/code&gt;, ça donnerait plutôt :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-regexp&quot; data-lang=&quot;regexp&quot;&gt;/^[a-zA-Z !]+$/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Au fait, tu ne m’as pas demandé pourquoi des délimiteurs ? 
Du coup j’y répond quand même : c’est parce que y’a des options possibles et qu’ils se mettent en fin de l’expression.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-regexp&quot; data-lang=&quot;regexp&quot;&gt;/regexp/options&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Tu veux la liste de ces options ? Ok, voici :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;g : Global&lt;/li&gt;
  &lt;li&gt;m : Multiline&lt;/li&gt;
  &lt;li&gt;i : Case insensitive&lt;/li&gt;
  &lt;li&gt;x : Ignore whitespace&lt;/li&gt;
  &lt;li&gt;s : Single line&lt;/li&gt;
  &lt;li&gt;u : Unicode&lt;/li&gt;
  &lt;li&gt;X : eXtended&lt;/li&gt;
  &lt;li&gt;U : Ungreedy&lt;/li&gt;
  &lt;li&gt;A : Anchor&lt;/li&gt;
  &lt;li&gt;J : Duplicate group names&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tu as reperé le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; pour gérer la casse ? Donc ça veut dire qu’on peut améliorer notre regexp :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-regexp&quot; data-lang=&quot;regexp&quot;&gt;/^[a-z !]+$/i&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;quelques-exemples&quot;&gt;Quelques exemples&lt;/h3&gt;

&lt;p&gt;Allez en vrac quelques regexp pour te montrer ce que ça peut vite devenir compliquer.&lt;/p&gt;

&lt;h4 id=&quot;mot-de-passe-complexe&quot;&gt;Mot de passe complexe&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-regexp&quot; data-lang=&quot;regexp&quot;&gt;/^ # Début de chaîne
(?=(.*[0-9])) # Au moins 1 chiffre
(?=.*[a-z]) # Au moins 1 minuscule
(?=(.*[A-Z])) # Au moins 1 majuscule
(?=.*[\!@#$%^&amp;amp;*()\\\\[\]{}\-_+=~`|:;&quot;\'&amp;lt;&amp;gt;,.\/?]) # Au moins 1 caractère spéciale
(?=(.*)).{8,} # Au moins 8 caractères
$ # Fin de chaîne/mx&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://regex101.com/r/DM6YCF/1&quot;&gt;Tester sur regex101&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;numéro-de-sécurité-sociale&quot;&gt;Numéro de sécurité sociale&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-regexp&quot; data-lang=&quot;regexp&quot;&gt;/^ # début de chaîne
(?&amp;lt;sexe&amp;gt;[12]) # 1 ou 2 pour le sexe
(?&amp;lt;naissance&amp;gt;[0-9]{2}(?:0[1-9]|1[0-2])) # année et mois de naissance (aamm)
(?&amp;lt;departement&amp;gt;2[AB]|[0-9]{2}) # le département
(?&amp;lt;postal_code&amp;gt;[0-9]{3}) # suite du code postal sur trois chiffres
(?&amp;lt;numserie&amp;gt;[0-9]{3}) # numéro de série sur trois chiffres
(?&amp;lt;controle&amp;gt;[0-9]{2})? # numéro de contrôle (facultatif)
$ # fin de chaîne/x&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://regex101.com/r/c3dn9F/1&quot;&gt;Tester sur regex101&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Bah c’est quoi les &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&amp;lt;...&amp;gt;&lt;/code&gt; que tu nous mets là ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;C’est pour nommer tes groupes, ça rend les éléments que tu captures plus lisible je trouve.&lt;/p&gt;

&lt;p&gt;Car oui je n’ai fait que survoler le sujet, il y a encore des choses à dire (les shortcodes, l’échappement, …), mais je te laisse faire tes propres recherches ;)&lt;/p&gt;</content><author><name>Fabrice Planchette</name></author><category term="code" /><category term="regexp" /><summary type="html">Les expressions régulières sont un outil transverse aux langages de programmation. Et que tu sois un développeur php ou javascript ou autre, quand un collègue te demande un coup de main pour écrire sa regexp (parce que regular expression c’est trop long), tu hésites et c’est normal.</summary></entry></feed>